@page "/lunch"
@page "/LunchMenu"
@using System.Text.Json
@inject NavigationManager Navigation

<h3>Lunch Menu for @Today.ToString("MMMM dd, yyyy")</h3>

@if (!string.IsNullOrEmpty(EventMessage))
{
    <p><strong>Event:</strong> @EventMessage</p>
}

<ul>
    @foreach (var item in TodayMenu)
    {
        <li>@item</li>
    }
</ul>

@code {
    private DateTime Today = DateTime.Now;
    private List<string> TodayMenu = new();
    private string? EventMessage;

    private List<List<string>> SummerLunches = new()
    {
        new() { "Quesadilla, apples, yogurt chips" },
        new() { "Ham/salami, cantaloupe, chips, baby carrots" },
        new() { "Chicken sticks, strawberries, peppers, chips" },
        new() { "Pizza, oranges/banana, GoGurt" },
        new() { "Kids pick" },
        new() { "Lunchable, blueberries, grapes, cucumbers, chips" },
        new() { "Peanut butter sandwich, apples, cheese sticks, chips" },
        new() { "Fish sticks, pineapple, carrots, chips" },
        new() { "Ham/salami sandwich, oranges, peppers, chips" },
        new() { "Kids pick" },
        new() { "Chicken sticks, blueberries, cucumbers, chips" },
        new() { "Pizza, oranges, banana, yogurt" },
        new() { "Quesadilla, apples, yogurt chips" },
        new() { "Lunchable, blueberry, grapes, chips" },
        new() { "Kids pick" }
    };

    // Updated school lunch menu - 3 weeks rotation (15 items)
    private List<List<string>> SchoolLunches = new()
    {
        // WEEK 1
        new() { "Chicken Nuggets w/ Blueberry Muffin", "Popcorn Chicken Salad", "Buttered Corn" }, // Monday
        new() { "Soft Beef Tacos", "Taco Salad", "Refried Beans" }, // Tuesday
        new() { "Bosco Sticks", "Yogurt Parfait w/ Homemade Granola", "Steamed Broccoli" }, // Wednesday
        new() { "Pasta w/ Assorted Sauces & Garlic Toast", "Taco Salad", "Green Beans" }, // Thursday
        new() { "Chicken Patty Sandwich", "Popcorn Chicken Salad", "Honey Glazed Carrots" }, // Friday

        // WEEK 2
        new() { "Mini Corn Dogs", "Popcorn Chicken Salad", "Smiley Potatoes" }, // Monday
        new() { "Chicken Teriyaki Dumplings", "Taco Salad", "Steamed Broccoli" }, // Tuesday
        new() { "Personal Pan Pizza", "Yogurt Parfait w/ Homemade Granola", "Green Beans" }, // Wednesday
        new() { "Chicken Smackers w/ Dinner Roll", "Taco Salad", "Mashed Potatoes w/ Gravy" }, // Thursday
        new() { "Soft Pretzel w/ Cheese", "Popcorn Chicken Salad", "Baked Beans" }, // Friday

        // WEEK 3
        new() { "Belgium Waffle w/ Sausage Patties", "Popcorn Chicken Salad", "Baked Apples" }, // Monday
        new() { "French Bread Pizza", "Taco Salad", "Buttered Corn" }, // Tuesday
        new() { "Cheeseburger", "Yogurt Parfait w/ Homemade Granola", "Baked Beans" }, // Wednesday
        new() { "Chicken Tenders w/ Corn Muffin", "Taco Salad", "Steamed Broccoli" }, // Thursday
        new() { "Pizza Crunchers w/ Dip", "Popcorn Chicken Salad", "Green Beans" } // Friday
    };

    private Dictionary<string, string> Events = new()
    {
        ["2025-06-03"] = "Test Event NB",
        ["2025-06-04"] = "Test Event NB",
        ["2025-08-04"] = "Teacher Work Day (No Students)",
        ["2025-08-05"] = "Teacher Work Day (No Students)",
        ["2025-08-06"] = "First Student Day",
        ["2025-09-01"] = "Labor Day Holiday",
        ["2025-10-06"] = "Fall Break",
        ["2025-10-07"] = "Fall Break",
        ["2025-10-08"] = "Fall Break",
        ["2025-10-09"] = "Fall Break",
        ["2025-10-10"] = "Fall Break",
        ["2025-11-06"] = "Elem. Parent/Teacher Conf. (Elem. Students Dismissed Half-Day)",
        ["2025-11-07"] = "Elem. Parent/Teacher Conf. (No School for Elem. Students)",
        ["2025-11-26"] = "Thanksgiving Break",
        ["2025-11-27"] = "Thanksgiving Break",
        ["2025-11-28"] = "Thanksgiving Break",
        ["2025-12-19"] = "Teacher Work Day (No Students)",
        ["2025-12-22"] = "Winter Break",
        ["2025-12-23"] = "Winter Break",
        ["2025-12-24"] = "Winter Break",
        ["2025-12-25"] = "Winter Break",
        ["2025-12-26"] = "Winter Break",
        ["2025-12-29"] = "Winter Break",
        ["2025-12-30"] = "Winter Break",
        ["2025-12-31"] = "Winter Break",
        ["2026-01-01"] = "Winter Break",
        ["2026-01-02"] = "Winter Break",
        ["2026-01-05"] = "Teacher Work Day (No Students)",
        ["2026-01-19"] = "Martin Luther King, Jr. Holiday",
        ["2026-02-16"] = "Presidents' Day Holiday",
        ["2026-04-06"] = "Spring Break",
        ["2026-04-07"] = "Spring Break",
        ["2026-04-08"] = "Spring Break",
        ["2026-04-09"] = "Spring Break",
        ["2026-04-10"] = "Spring Break",
        ["2026-05-22"] = "Last Student Day",
        ["2026-05-25"] = "Memorial Day (Schools & Offices Closed)",
        ["2026-05-26"] = "Teacher Work Day (No Students)"
    };

    protected override void OnInitialized()
    {
        // TIME-based function: After 2 PM ET, show tomorrow's menu
        if (DateTime.Now.Hour >= 14)
            Today = Today.AddDays(1);

        // Check for special events first
        var todayStr = Today.ToString("yyyy-MM-dd");
        if (Events.ContainsKey(todayStr))
        {
            EventMessage = Events[todayStr];
            // If it's a no-school day, show a message instead of menu
            if (EventMessage.Contains("No Students") || 
                EventMessage.Contains("Break") || 
                EventMessage.Contains("Holiday") ||
                EventMessage.Contains("Last Student Day"))
            {
                TodayMenu = new() { "No school lunch today - " + EventMessage };
                return;
            }
        }

        // DATE-based function: Determine if we're in school year (starts Aug 6, 2025)
        var schoolYearStart = new DateTime(2025, 8, 6);
        var schoolYearEnd = new DateTime(2026, 5, 22);
        var isSchoolYear = Today >= schoolYearStart && Today <= schoolYearEnd;

        if (isSchoolYear)
        {
            // School year: Calculate weekdays since school started
            var start = schoolYearStart;
            int weekdaysPassed = Enumerable.Range(0, (Today - start).Days + 1)
                .Select(i => start.AddDays(i))
                .Where(d => d.DayOfWeek != DayOfWeek.Saturday && d.DayOfWeek != DayOfWeek.Sunday)
                .Where(d => !Events.ContainsKey(d.ToString("yyyy-MM-dd")) || 
                           !Events[d.ToString("yyyy-MM-dd")].Contains("No Students"))
                .Count() - 1;

            int index = weekdaysPassed % 15; // 15-item school lunch rotation
            if (index < 0) index = 0; // Handle edge case
            TodayMenu = SchoolLunches[index];
        }
        else
        {
            // Summer: Calculate weekdays since summer started (May 23, 2025)
            var summerStart = new DateTime(2025, 5, 23);
            int weekdaysPassed = Enumerable.Range(0, (Today - summerStart).Days + 1)
                .Select(i => summerStart.AddDays(i))
                .Count(d => d.DayOfWeek != DayOfWeek.Saturday && d.DayOfWeek != DayOfWeek.Sunday) - 1;

            int index = weekdaysPassed % 15; // 15-item summer lunch rotation
            if (index < 0) index = 0; // Handle edge case
            TodayMenu = SummerLunches[index];
        }
    }
}
