@page "/lunch"
@page "/LunchMenu"
@using System.Text.Json
@using SeatingChartApp.Services
@inject NavigationManager Navigation
@inject SchoolEventsService SchoolEvents

<h3>Lunch Menu for @Today.ToString("MMMM dd, yyyy")</h3>

@if (!string.IsNullOrEmpty(EventMessage))
{
    <p><strong>Event:</strong> @EventMessage</p>
}

<ul>
    @foreach (var item in TodayMenu)
    {
        <li>@item</li>
    }
</ul>

@code {
    private DateTime Today = TimeZoneInfo.ConvertTime(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("America/New_York"));
    private List<string> TodayMenu = new();
    private string? EventMessage;

    private List<List<string>> SummerLunches = new()
    {
        new() { "Quesadilla, apples, yogurt chips" },
        new() { "Ham/salami, cantaloupe, chips, baby carrots" },
        new() { "Chicken sticks, strawberries, peppers, chips" },
        new() { "Pizza, oranges/banana, GoGurt" },
        new() { "Kids pick" },
        new() { "Lunchable, blueberries, grapes, cucumbers, chips" },
        new() { "Peanut butter sandwich, apples, cheese sticks, chips" },
        new() { "Fish sticks, pineapple, carrots, chips" },
        new() { "Ham/salami sandwich, oranges, peppers, chips" },
        new() { "Kids pick" },
        new() { "Chicken sticks, blueberries, cucumbers, chips" },
        new() { "Pizza, oranges, banana, yogurt" },
        new() { "Quesadilla, apples, yogurt chips" },
        new() { "Lunchable, blueberry, grapes, chips" },
        new() { "Kids pick" }
    };

    // Updated school lunch menu - 3 weeks rotation (15 items)
    private List<List<string>> SchoolLunches = new()
    {
        // WEEK 1
        new() { "Chicken Nuggets w/ Blueberry Muffin", "Popcorn Chicken Salad", "Buttered Corn" }, // Monday
        new() { "Soft Beef Tacos", "Taco Salad", "Refried Beans" }, // Tuesday
        new() { "Bosco Sticks", "Yogurt Parfait w/ Homemade Granola", "Steamed Broccoli" }, // Wednesday
        new() { "Pasta w/ Assorted Sauces & Garlic Toast", "Taco Salad", "Green Beans" }, // Thursday
        new() { "Chicken Patty Sandwich", "Popcorn Chicken Salad", "Honey Glazed Carrots" }, // Friday

        // WEEK 2
        new() { "Mini Corn Dogs", "Popcorn Chicken Salad", "Smiley Potatoes" }, // Monday
        new() { "Chicken Teriyaki Dumplings", "Taco Salad", "Steamed Broccoli" }, // Tuesday
        new() { "Personal Pan Pizza", "Yogurt Parfait w/ Homemade Granola", "Green Beans" }, // Wednesday
        new() { "Chicken Smackers w/ Dinner Roll", "Taco Salad", "Mashed Potatoes w/ Gravy" }, // Thursday
        new() { "Soft Pretzel w/ Cheese", "Popcorn Chicken Salad", "Baked Beans" }, // Friday

        // WEEK 3
        new() { "Belgium Waffle w/ Sausage Patties", "Popcorn Chicken Salad", "Baked Apples" }, // Monday
        new() { "French Bread Pizza", "Taco Salad", "Buttered Corn" }, // Tuesday
        new() { "Cheeseburger", "Yogurt Parfait w/ Homemade Granola", "Baked Beans" }, // Wednesday
        new() { "Chicken Tenders w/ Corn Muffin", "Taco Salad", "Steamed Broccoli" }, // Thursday
        new() { "Pizza Crunchers w/ Dip", "Popcorn Chicken Salad", "Green Beans" } // Friday
    };

    protected override async Task OnInitializedAsync()
    {
        var easternTime = TimeZoneInfo.FindSystemTimeZoneById("America/New_York");
        var now = TimeZoneInfo.ConvertTime(DateTime.UtcNow, easternTime);
        
        // TIME-based function: After 2 PM ET, show tomorrow's menu
        if (now.Hour >= 14)
            Today = Today.AddDays(1);

        // Handle weekends - show "It's the weekend" message
        if (Today.DayOfWeek == DayOfWeek.Saturday || Today.DayOfWeek == DayOfWeek.Sunday)
        {
            TodayMenu = new() { "It's the weekend! No school lunch today." };
            return;
        }

        // Check for special events first
        try 
        {
            var todaysEvent = await SchoolEvents.GetEventForDateAsync(Today);
            if (todaysEvent != null)
            {
                EventMessage = todaysEvent.Title;
            }

            // Check if it's a school day
            var isSchoolDay = await SchoolEvents.IsSchoolDayAsync(Today);
            if (!isSchoolDay)
            {
                var reason = todaysEvent?.Title ?? "No school today";
                TodayMenu = new() { $"No school lunch today - {reason}" };
                return;
            }
        }
        catch (Exception ex)
        {
            // Fallback to basic weekend check if service fails
            if (Today.DayOfWeek == DayOfWeek.Saturday || Today.DayOfWeek == DayOfWeek.Sunday)
            {
                TodayMenu = new() { "It's the weekend! No school lunch today." };
                return;
            }
        }

        // DATE-based function: Determine if we're in school year using dynamic service
        var isSchoolYear = true;
        try 
        {
            isSchoolYear = await SchoolEvents.IsSchoolDayAsync(Today);
        }
        catch 
        {
            // Fallback to static dates if service fails
            var schoolYearStart = new DateTime(2025, 8, 6);
            var schoolYearEnd = new DateTime(2026, 5, 22);
            isSchoolYear = Today >= schoolYearStart && Today <= schoolYearEnd;
        }

        if (isSchoolYear)
        {
            // School year: Calculate which week we're in based on actual school calendar
            // September 22, 2025 should be Mini Corn Dogs (Week 2, Monday)
            var sept22 = new DateTime(2025, 9, 22); // Reference date for Week 2, Monday
            var daysDiff = (Today.Date - sept22.Date).Days;
            
            // Calculate the lunch cycle position
            int weekdayOffset = 0;
            switch (Today.DayOfWeek)
            {
                case DayOfWeek.Monday: weekdayOffset = 0; break;
                case DayOfWeek.Tuesday: weekdayOffset = 1; break;
                case DayOfWeek.Wednesday: weekdayOffset = 2; break;
                case DayOfWeek.Thursday: weekdayOffset = 3; break;
                case DayOfWeek.Friday: weekdayOffset = 4; break;
            }
            
            // Week 2 starts at index 5 (Monday Week 2 = index 5)
            int baseIndex = 5 + weekdayOffset; // Sept 22 is Week 2 Monday
            
            // Calculate weeks difference
            int weeksDiff = daysDiff / 7;
            int totalIndex = baseIndex + (weeksDiff * 5); // 5 days per week
            
            // Handle the 3-week rotation (15 items total)
            int index = ((totalIndex % 15) + 15) % 15; // Ensure positive modulo
            TodayMenu = SchoolLunches[index];
        }
        else
        {
            // Summer: Calculate weekdays since summer started (May 23, 2025)
            var summerStart = new DateTime(2025, 5, 23);
            int weekdaysPassed = Enumerable.Range(0, (Today - summerStart).Days + 1)
                .Select(i => summerStart.AddDays(i))
                .Count(d => d.DayOfWeek != DayOfWeek.Saturday && d.DayOfWeek != DayOfWeek.Sunday) - 1;

            int index = weekdaysPassed % 15; // 15-item summer lunch rotation
            if (index < 0) index = 0; // Handle edge case
            TodayMenu = SummerLunches[index];
        }
    }
}
